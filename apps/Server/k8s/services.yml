apiVersion: apps/v1
kind: Deployment
metadata:
  name: service_name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service_name
  template:
    metadata:
      labels:
        app: service_name
    spec:
      volumes:
        - name: workspace-volume
          emptyDir: {}
      initContainers:
        - name: copy-s3-resources
          image: amazon/aws-cli
          command: ["/bin/sh", "-c"]
          args:
            - >
              aws s3 cp s3://devzencodefiles/code/service_name/ /workspace/ --recursive &&
              echo "Resources copied from S3";
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_ACCESS_KEY
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_SECRET_KEY
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_REGION
            - name: AWS_S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_BUCKET_NAME
            - name: AWS_S3_BUCKET_URL
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_BUCKET_URL    
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
      containers:
        - name: ashwin-devzen-backend
          image: ashpanda007/devzen-backend
          ports: 
            - containerPort: 8080
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            requests:
              cpu: "1"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"

---

apiVersion: v1
kind: Service
metadata:
  name: service_name
spec:
  selector:
    app: service_name
  ports:
    - protocol: TCP
      name: service_name
      port: 8080
      targetPort: 8080
--- 

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service_name
  annotations:
      nginx.ingress.kubernetes.io/enable-websocket: "true"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec: 
  ingressClassName: nginx
  rules:
    - host: devzen.ashprojects.tech
      http: 
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 8080



