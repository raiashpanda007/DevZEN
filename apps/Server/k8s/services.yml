apiVersion: apps/v1
kind: Deployment
metadata:
  name: service_name
  labels:
    app: service_name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service_name
  template:
    metadata:
      labels:
        app: service_name
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
        - name: workspace-volume
          emptyDir: {}
      initContainers:
        - name: copy-s3-resources
          image: ashpanda007/aws-cli-devzen:latest
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          command: ["/bin/sh","-c"]
          args:
            - |
              set -e
              set -x
              aws s3 cp s3://devzencodefiles/code/service_name/ /workspace/ --recursive
              echo "Resources copied from S3"
              # Extract .tar.gz archives
              for f in /workspace/*.tar.gz; do
                [ -e "$f" ] || continue
                echo "Extracting $f"
                tar -xzf "$f" -C /workspace
                rm -f "$f"
              done
              # Extract .zip archives
              for f in /workspace/*.zip; do
                [ -e "$f" ] || continue
                echo "Unzipping $f"
                unzip -qo "$f" -d /workspace
                rm -f "$f"
              done
              # Normalize first depth to /workspace/service_name
              TARGET_DIR=/workspace/service_name
              if [ ! -d "$TARGET_DIR" ]; then
                set +e
                top_items=$(ls -1A /workspace | grep -Ev '(\.tar\.gz|\.zip)$' || true)
                set -e
                count=$(printf "%s\n" "$top_items" | sed '/^$/d' | wc -l)
                if [ "$count" -eq 1 ] && [ -d "/workspace/$top_items" ]; then
                  # Single directory -> rename to service_name
                  mv "/workspace/$top_items" "$TARGET_DIR"
                else
                  mkdir -p "$TARGET_DIR"
                  for i in $top_items; do
                    [ "$i" = "service_name" ] && continue
                    mv "/workspace/$i" "$TARGET_DIR"/
                  done
                fi
              fi
              echo "Decompression complete"
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_ACCESS_KEY
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_SECRET_KEY
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_REGION
            - name: AWS_S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_BUCKET_NAME
            - name: AWS_S3_BUCKET_URL
              valueFrom:
                secretKeyRef:
                  name: aws-secret-prod
                  key: AWS_S3_BUCKET_URL
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
      containers:
        - name: backend
          image: ashpanda007/devzen-backend:latest
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
          ports:
            - containerPort: 8080
          env:
            - name: PORT
              value: "8080"
          envFrom:
            - secretRef:
                name: aws-secret-prod
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: service_name
  labels:
    app: service_name
spec:
  selector:
    app: service_name
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service_name
  annotations:
    nginx.ingress.kubernetes.io/enable-websocket: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/hsts: "true"
    nginx.ingress.kubernetes.io/hsts-max-age: "31536000"
    nginx.ingress.kubernetes.io/hsts-include-subdomains: "true"
    nginx.ingress.kubernetes.io/hsts-preload: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - '*.devzen.ashprojects.tech'
      secretName: devzen-wildcard-cert
  rules:
    - host: service_name.devzen.ashprojects.tech
      http:
        paths:
          - path: /ws
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 8080
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 8080
          - path: /healthz
            pathType: Prefix
            backend:
              service:
                name: service_name
                port: 
                  number: 8080

